#pragma kernel ShadeOpaque_Fptl				            SHADE_OPAQUE_ENTRY=ShadeOpaque_Fptl				        USE_FPTL_LIGHTLIST
#pragma kernel ShadeOpaque_Fptl_DebugLighting			SHADE_OPAQUE_ENTRY=ShadeOpaque_Fptl_DebugLighting		USE_FPTL_LIGHTLIST        LIGHTING_DEBUG
#pragma kernel ShadeOpaque_Clustered		            SHADE_OPAQUE_ENTRY=ShadeOpaque_Clustered		        USE_CLUSTERED_LIGHTLIST
#pragma kernel ShadeOpaque_Clustered_DebugLighting		SHADE_OPAQUE_ENTRY=ShadeOpaque_Clustered_DebugLighting	USE_CLUSTERED_LIGHTLIST   LIGHTING_DEBUG

#pragma #pragma enable_d3d11_debug_symbols

// Split lighting is required for the SSS pass.
// Not currently possible since we need to access the stencil buffer from the compute shader.
// #pragma multi_compile _ OUTPUT_SPLIT_LIGHTING

#define LIGHTLOOP_TILE_PASS 1
#define LIGHTLOOP_TILE_DIRECT 1
#define LIGHTLOOP_TILE_INDIRECT 1
#define LIGHTLOOP_TILE_ALL 1

//-------------------------------------------------------------------------------------
// Include
//-------------------------------------------------------------------------------------

#include "ShaderLibrary/Common.hlsl"
#include "HDRenderPipeline/Debug/HDRenderPipelineDebug.cs.hlsl"
#include "HDRenderPipeline/Debug/DebugLighting.hlsl"

// Note: We have fix as guidelines that we have only one deferred material (with control of GBuffer enabled). Mean a users that add a new
// deferred material must replace the old one here. If in the future we want to support multiple layout (cause a lot of consistency problem), 
// the deferred shader will require to use multicompile.
#define UNITY_MATERIAL_LIT // Need to be define before including Material.hlsl
#include "HDRenderPipeline/ShaderConfig.cs.hlsl"
#include "HDRenderPipeline/ShaderVariables.hlsl"
#include "HDRenderPipeline/Lighting/Lighting.hlsl" // This include Material.hlsl

//-------------------------------------------------------------------------------------
// variable declaration
//-------------------------------------------------------------------------------------

DECLARE_GBUFFER_TEXTURE(_GBufferTexture);

#ifdef OUTPUT_SPLIT_LIGHTING
    RWTexture2D<float4> specularLightingUAV;
    RWTexture2D<float3> diffuseLightingUAV;
#else
    RWTexture2D<float4> combinedLightingUAV;
#endif

[numthreads(16, 16, 1)]
void SHADE_OPAQUE_ENTRY(uint2 dispatchThreadId : SV_DispatchThreadID, uint2 groupId : SV_GroupID)
{
    uint2 pixelCoord = dispatchThreadId;
    PositionInputs posInput = GetPositionInput(pixelCoord.xy, _ScreenSize.zw);
    float depth = LOAD_TEXTURE2D(_MainDepthTexture, posInput.unPositionSS).x;
    UpdatePositionInput(depth, _InvViewProjMatrix, _ViewProjMatrix, posInput);
    float3 V = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

    FETCH_GBUFFER(gbuffer, _GBufferTexture, posInput.unPositionSS);
    BSDFData bsdfData;
    float3 bakeDiffuseLighting;
    DECODE_FROM_GBUFFER(gbuffer, bsdfData, bakeDiffuseLighting);

    PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

    float3 diffuseLighting;
    float3 specularLighting;
    LightLoop(V, posInput, preLightData, bsdfData, bakeDiffuseLighting, diffuseLighting, specularLighting);

#ifdef OUTPUT_SPLIT_LIGHTING
    specularLightingUAV[pixelCoord] = float4(specularLighting, 1.0);
    diffuseLightingUAV[pixelCoord]  = diffuseLighting;
#else
    combinedLightingUAV[pixelCoord] = float4(diffuseLighting + specularLighting, 1.0);
#endif
}

